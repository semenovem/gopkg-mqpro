

runmqckm -cert -receive -file -db key.kdb -pw passw0rd


(where is signed request file from CA)


.


https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_9.0.0/com.ibm.mq.sec.doc/q012800_.html
Then use the runmqckm commands to ensure you have a personal certificate



and all the CA signer certificates


.


// list personal certs


runmqckm -cert -list personal -db key.kdb -pw passw0rd
// list ca-signer certs



runmqckm -cert -list ca -db key.kdb -pw passw0rd
Java client certificate and JKS keystore:
Setup Java JKS keystore/truststore repository and certificate.# create this in some directory..

runmqckm -keydb -create -db javaclient.jks -type jks -pw passw0rd



.


// CA-signed..


.


runmqckm -certreq -create -db javaclient.jks -type jks -pw passw0rd -label javaclientcert -dn "CN=client,O=IBM,C=US" -size 2048 -file client.req -sig_alg SHA256_WITH_RSA


.


// send file client.req to CA to get signed..


// CA provides signed request + CA signer certificates, which need to be added to keystore, and exchanged to remote partner.
// add CA root and any CA intermediate signer certificates (do NOT use add on Signed request)



.


runmqckm -cert -add -db javaclient.jks -pw passw0rd -type jks -label -file


.


https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_9.0.0/com.ibm.mq.sec.doc/q012830_.html
// receive signed cert file (from CA) to jks with runmqckm -cert -receive



(this merges existing private key in jks.. with the signed cert request from CA)


.


runmqckm -cert -receive -file -db javaclient.jks -pw passw0rd -type jks


(where is signed request file from CA)


.


https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_9.0.0/com.ibm.mq.sec.doc/q012800_.html
Then use the runmqckm commands to ensure you have a personal certificate



and all the CA signer certificates


.// list personal certs


runmqckm -cert -list personal -db javaclient.jks -pw passw0rd -type jks
// list ca-signer certs



runmqckm -cert -list ca -db javaclient.jks -pw passw0rd -type jks
Exchange CA signer (Intermediate and Root certificates) between the qmgr and Java client's keystore..
// Java requires a truststore for this.



// you can use the same .jks file for both the truststore and keystore,


// or you can make separate keystore and truststore.jks files.
// for this example, we will use the same javaclient.jks for



// both the Java keystore and truststore.
// list the certs on both side again, to ensure/verify you have



// the needed CA certificates and personal certificates on both sides.
At this point, the keystores and certificates should be correct.



On the MQ qmgr,in runmqsc for the qmgr:

DISPLAY QMGR SSLKEYR

make sure that SSLKEYR on qmgr matches full



path and BASE filename of the keystore.. (without file extensions)


ie default for qmgr QM1


SSLKEYR(/var/mqm/qmgrs/QM1/ssl/key)
If you named the qmgrs keystore differently, you need



to alter the SSLKEYR value to match (be careful not to


use file extension).
After any changes to the queue manager's keystore



make sure to issue in runmqsc:
REFRESH SECURITY TYPE(SSL)

this reloads the keystore and any changes.

For you Java client program - Specify certificate keystore/truststore

You must specify the keystore and truststore filesand passwords to these. This can be done via JVMsettings or via code:

examples



for JVM settings:


-Djavax.net.ssl.trustStore=javaclient.jks


-Djavax.net.ssl.trustStorePassword=password


-Djavax.net.ssl.keyStore=javaclient.jks


-Djavax.net.ssl.keyStorePassword=password
in c...(1/2)

Accepted answer
MCregge
 MCregge (1)
7 Sep 2019  (2 years ago)
To setup SSL/TLS between MQ queue manager and MQ Java program(using 3rd party CA-signed certificates)

Primarily, 2 things need to be setup correctly for an SSL/TLS connection to be successful.

both sides of the connection need correct certificate keystores/truststores with the appropriate certificates in place.

for MQ both sides of the connection MUST specify a matching cipher when starting the communication. For Java this can be tricky, due to cipherspec/ciphersuite naming conventions, and also depends on the Java JRE vendor and ciphersuite support.

From Java client side, its important to know..- what version of MQ Java/JMS classes/client is being used.- what version/vendor Java/JRE is being used (IBM's or Oracles/Hotspot, etc)

Java uses JKS-type (.jks) keystore, whereas MQ used CMS-type (.kdb) keystore

Java uses ciphersuite whereas MQ uses cipherspec (there is a mapping from ciphersuite to cipherspec built into MQ client jars)

1st part is making sure that the certificates and keystoresare setup correctly.

Example:



Setup queue manager QM1:
// Create, prepare MQ qmgr

crtmqm QM1strmqm QM1

runmqsc QM1

in runmqsc, create listener, channels, queues, etc.. (make sure listener port is unique)

DEFINE LISTENER(LIST1) TRPTYPE(TCP) PORT(2014) CONTROL(QMGR)



START LISTENER(LIST1)
DEFINE CHANNEL(CHAN1) CHLTYPE(SVRCONN) SSLCAUTH(OPTIONAL)



DEFINE QLOCAL(Q1)
DEFINE CHANNEL(CHAN2) CHLTYPE(SVRCONN) SSLCAUTH(OPTIONAL) SSLCIPH(TLS_RSA_WITH_AES_128_CBC_SHA)

// if MQ v7.1 or higher, disable CHLAUTH and CONNAUTH (v8) to test

ALTER QMGR CHLAUTH(DISABLED) CONNAUTH (' ')



REFRESH SECURITY TYPE(CONNAUTH)
// QMGR and Listener should be RUNNING and ready.

Setup queue manager certificate and keystore repository
// goto qmgrs//ssl directory:

(linux as mqm user)



cd /var/mqm/qmgrs/QM1/ssl


.


runmqckm -keydb -create -db key.kdb -type cms -pw passw0rd -stash


.


// CA-signed..


.


runmqckm -certreq -create -db key.kdb -pw passw0rd -label ibmwebspheremqqm1 -dn "CN=qm1,O=IBM,C=US" -size 2048 -file qm1.req -sig_alg SHA256_WITH_RSA
// Note that the qmgr personal certificate label name is following



// recommended default labelname
 https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_9.0.0/com.ibm.mq.sec.doc/q014340_.html



.


// send file ssl1.req to CA to get signed..


// CA provides signed request + CA signer certificates, which need to be added to keystore, and exchanged to remote partner.
// add CA root and any CA intermediate signer certificates (do NOT use add on Signed request)



.


runmqckm -cert -add -db key.kdb -pw passw0rd -label label -file


.


https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_9.0.0/com.ibm.mq.sec.doc/q012830_.html
// receive signed cert file (from CA) to kdb with runmqckm -cert -receive



(this merges existing private key in kdb.. with the signed cert request from CA)


.


runmqckm -cert -receive -file -db key.kdb -pw passw0rd


(where is signed request file from CA)


.


https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_9.0.0/com.ibm.mq.sec.doc/q012800_.html
Then use the runmqckm commands to ensure you have a personal certificate



and all the CA signer certificates


.


// list personal certs


runmqckm -cert -list personal -db key.kdb -pw passw0rd
// list ca-signer certs



runmqckm -cert -list ca -db key.kdb -pw passw0rd
Java client certificate and JKS keystore:
Setup Java JKS keystore/truststore repository and certificate.# create this in some directory..

runmqckm -keydb -create -db javaclient.jks -type jks -pw passw0rd



.


// CA-signed..


.


runmqckm -certreq -create -db javaclient.jks -type jks -pw passw0rd -label javaclientcert -dn "CN=client,O=IBM,C=US" -size 2048 -file client.req -sig_alg SHA256_WITH_RSA


.


// send file client.req to CA to get signed..


// CA provides signed request + CA signer certificates, which need to be added to keystore, and exchanged to remote partner.
// add CA root and any CA intermediate signer certificates (do NOT use add on Signed request)



.


runmqckm -cert -add -db javaclient.jks -pw passw0rd -type jks -label -file


.


https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_9.0.0/com.ibm.mq.sec.doc/q012830_.html
// receive signed cert file (from CA) to jks with runmqckm -cert -receive



(this merges existing private key in jks.. with the signed cert request from CA)


.


runmqckm -cert -receive -file -db javaclient.jks -pw passw0rd -type jks


(where is signed request file from CA)


.


https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_9.0.0/com.ibm.mq.sec.doc/q012800_.html
Then use the runmqckm commands to ensure you have a personal certificate



and all the CA signer certificates


.// list personal certs


runmqckm -cert -list personal -db javaclient.jks -pw passw0rd -type jks
// list ca-signer certs



runmqckm -cert -list ca -db javaclient.jks -pw passw0rd -type jks
Exchange CA signer (Intermediate and Root certificates) between the qmgr and Java client's keystore..
// Java requires a truststore for this.



// you can use the same .jks file for both the truststore and keystore,


// or you can make separate keystore and truststore.jks files.
// for this example, we will use the same javaclient.jks for



// both the Java keystore and truststore.
// list the certs on both side again, to ensure/verify you have



// the needed CA certificates and personal certificates on both sides.
At this point, the keystores and certificates should be correct.



On the MQ qmgr,in runmqsc for the qmgr:

DISPLAY QMGR SSLKEYR

make sure that SSLKEYR on qmgr matches full



path and BASE filename of the keystore.. (without file extensions)


ie default for qmgr QM1


SSLKEYR(/var/mqm/qmgrs/QM1/ssl/key)
If you named the qmgrs keystore differently, you need



to alter the SSLKEYR value to match (be careful not to


use file extension).
After any changes to the queue manager's keystore



make sure to issue in runmqsc:
REFRESH SECURITY TYPE(SSL)

this reloads the keystore and any changes.

For you Java client program - Specify certificate keystore/truststore

You must specify the keystore and truststore filesand passwords to these. This can be done via JVMsettings or via code:

examples



for JVM settings:


-Djavax.net.ssl.trustStore=javaclient.jks


-Djavax.net.ssl.trustStorePassword=password


-Djavax.net.ssl.keyStore=javaclient.jks


-Djavax.net.ssl.keyStorePassword=password
in c...(1/2)

MCregge
 MCregge (1)
7 Sep 2019  (2 years ago)
...ode:


System.setProperty("javax.net.ssl.trustStore", strtrustStore);


System.setProperty("javax.net.ssl.trustStorePassword", strtrustStorePassword);


System.setProperty("javax.net.ssl.keyStore", strkeyStore);


System.setProperty("javax.net.ssl.keyStorePassword", strkeyStorePassword);
You must also specify the ciphersuite, see the table in



the knowledgecenter to specify correct ciphersuite name:
 https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_9.0.0/com.ibm.mq.dev.doc/q113210_.html

Note the table.. shows ciphersuite name, differs if using



IBM JRE vs. Oracle JRE.
also if using Oracle JRE, you need to specify additional JVM option:

-com.ibm.mq.cfg.useIBMCipherMappings=false

example in code:



MQEnvironment.sslCipherSuite = strsslCipherSuite;
I am including a simple sample program you can use



to test a connection at the bottom of this email.
For a test program, I am attaching SSLConn.java program



Also putting source here, you will need to modify it, compile


it. with your connection details..
To run it.. use all the System JVM options on the command



line: (all on one line)
java



-Djavax.net.ssl.trustStore=javaclient.jks


-Djavax.net.ssl.trustStorePassword=password


-Djavax.net.ssl.keyStorePassword=password


-Djavax.net.ssl.keyStore=javaclient.jks


sslConn
sslConn.java (save below to file, and compile w/ Java)

//------------------------------------------ // sslconn.java //------------------------------------------ import com.ibm.mq.*; import java.security.cert.*; //. public class sslConn { public static void main( String[] args ) throws Exception { System.out.println("Starting program..."); MQEnvironment.enableTracing(3, new java.io.FileOutputStream("trace.log")); MQEnvironment.hostname = "192.168.0.100"; MQEnvironment.channel = "CHAN2"; MQEnvironment.port = 2014; MQEnvironment.properties.put(MQC.SSL_CIPHER_SUITE_PROPERTY,"SSL_RSA_WITH_AES_128_CBC_SHA"); MQQueueManager qMgr; MQQueue queue; try { qMgr = new MQQueueManager("QM1"); queue = qMgr.accessQueue("Q1",MQC.MQOO_INPUT_AS_Q_DEF|MQC.MQOO_OUTPUT, null, null, null); } catch ( com.ibm.mq.MQException me ) { System.out.println("USRAPP: Root cause = " + me.getCause() ); throw me; } catch ( NullPointerException npe ) { System.out.println("Null caught"); throw npe; } catch ( Exception e ) { throw e; } MQMessage msg = new MQMessage(); msg.writeUTF("Hello World"); queue.put( msg, new MQPutMessageOptions()); MQMessage rMsg = new MQMessage(); queue.get(rMsg, new MQGetMessageOptions(), 30); String msgReceived = rMsg.readLine(); System.out.println("Message received : " + msgReceived); queue.close(); qMgr.disconnect(); } }
Note:



If using the Oracle or non-IBM JRE then you must


name the ciphersuite correctly


(ie: "TLS_RSA_WITH_AES_128_CBC_SHA")
and also add the JVM property:



-Dcom.ibm.mq.cfg.useIBMCipherMappings=false
Related dwanswers:

https://ibmsf.force.com/mysupport/s/question/0D50z00005q4GZICA2

https://ibmsf.force.com/mysupport/s/question/0D50z00005q4FSMCA2



Likes - 1...(2/2)
